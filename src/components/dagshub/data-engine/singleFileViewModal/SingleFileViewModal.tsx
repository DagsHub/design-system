import { Box } from '@mui/system';
import React, { useRef, useState } from 'react';
import { useMediaQuery } from '@mui/material';
import { GenericModal, MetadataKeyValueList } from '../../index';
import { Button, ButtonVariant } from '../../../elements/button';
import { Icon } from '../../../icons';
import { ItemFallback } from './ItemFallback';
import './style.scss';
import { CustomAccordion } from './CustomAccordion';
import TopButtonsSection from './TopButtonsSection';

export interface MetadataField {
  key: string;
  value: any;
  valueType: 'STRING' | 'FLOAT' | 'INTEGER' | 'BOOLEAN' | 'BLOB';
  multiple?: boolean;
  isAutoGenerated?: boolean;
}

export interface itemData {
  itemIndex: number;
  itemType: string;
  repoFilePath: string;
  galleryFilePath: string;
  fileName: string;
  metadataList: MetadataField[];
  hasNext: boolean;
  hasPrevious: boolean;
}

export interface singleFileViewModalProps {
  closeModal: () => void;
  itemData: itemData;
  onGetNextItemClickHandler: () => void;
  onGetPreviousItemClickHandler: () => void;
}

function SingleFileViewModal({
  closeModal,
  itemData,
  onGetNextItemClickHandler,
  onGetPreviousItemClickHandler
}: singleFileViewModalProps) {
  const [showMetadataOverlay, setShowMetadataOverlay] = useState<boolean>(false);

  const getPreviousItemButtonRef = useRef<HTMLButtonElement>(null);
  const getNextItemButtonRef = useRef<HTMLButtonElement>(null);

  const breakpoint = useMediaQuery('(max-width: 800px)');

  const SIDEBAR_WIDTH = 350; //I decided on this number
  const ARROWS_SECTION_HEIGHT = 52;
  const TOP_SECTION_HEIGHT = 52;
  const LINE_HEIGHT = 24;
  const TOP_SECTION_HEIGHT_ON_SMALL_SCREEN = TOP_SECTION_HEIGHT + LINE_HEIGHT; //Because I fource it to wrap

  return (
    <div id={'gallery'}>
      <GenericModal
        title={''}
        onClose={closeModal}
        elements={[
          <Box
            sx={{
              display: 'flex',
              width: '100%',
              height: '100%',
              flexDirection: 'column',
              padding: '24px',
              boxSizing: 'border-box',
              justifyContent: 'space-between'
            }}
          >
            <TopButtonsSection
              height={`${TOP_SECTION_HEIGHT}px`}
              isSmallScreen={breakpoint}
              fileName={itemData.fileName}
              linkToFile={itemData.repoFilePath}
              onMetadataIconClick={() => setShowMetadataOverlay(!showMetadataOverlay)}
              metadataButtonIcon={
                showMetadataOverlay ? 'solid-sidebar-arrow-left' : 'solid-sidebar-arrow-right'
              }
            />
            <Box
              sx={{
                display: 'flex',
                border: '2px solid #E2E8F0',
                width: '100%',
                height: breakpoint
                  ? `calc(100% - ${TOP_SECTION_HEIGHT_ON_SMALL_SCREEN}px)`
                  : `calc(100% - 52px)`,
                flexDirection: 'row',
                boxSizing: 'border-box'
              }}
            >
              <Box
                sx={{
                  display: 'flex',
                  width: !breakpoint ? `CALC(100% - ${SIDEBAR_WIDTH}px)` : `100%`,
                  flexDirection: 'column',
                  height: '100%',
                  boxSizing: 'border-box'
                }}
              >
                {breakpoint && showMetadataOverlay ? (
                  <Box
                    sx={{
                      display: 'flex',
                      width: !breakpoint ? `${SIDEBAR_WIDTH}px` : 'auto',
                      padding: '8px',
                      flexDirection: 'column',
                      height: `calc(100% - ${ARROWS_SECTION_HEIGHT}px)`
                    }}
                  >
                    <CustomAccordion label={'Metadata'}>
                      <MetadataKeyValueList
                        metadataList={itemData.metadataList}
                        editingEnabled={false}
                        deletionEnabled={false}
                        onChangeHandler={() => {}}
                      />
                    </CustomAccordion>
                  </Box>
                ) : (
                  <Box
                    sx={{
                      display: 'flex',
                      width: '100%',
                      height: `calc(100% - ${ARROWS_SECTION_HEIGHT}px)`,
                      padding: '8px',
                      justifyContent: 'center',
                      bgcolor: '#F8FAFC',
                      alignItems: 'center',
                      boxSizing: 'border-box'
                    }}
                  >
                    {!!itemData.galleryFilePath && itemData.itemType === 'image' ? (
                      <img
                        style={{ objectFit: 'contain', maxWidth: '100%', maxHeight: '100%' }}
                        alt={''}
                        src={itemData.galleryFilePath}
                      />
                    ) : itemData.itemType === 'video' ? (
                      <video
                        style={{ objectFit: 'contain', maxWidth: '100%', maxHeight: '100%' }}
                        controls
                        src={itemData.galleryFilePath}
                      ></video>
                    ) : itemData.itemType === 'audio' ? (
                      <audio
                        controls
                        preload="metadata"
                        style={{
                          objectFit: 'contain',
                          maxWidth: '100%',
                          maxHeight: '100%',
                          width: '80%'
                        }}
                      >
                        <source src={itemData.galleryFilePath} />
                        Your browser doesn't support HTML5 video tag.
                      </audio>
                    ) : (
                      <ItemFallback
                        height={`calc(100% - ${ARROWS_SECTION_HEIGHT}px)`}
                        width={'100%'}
                        disableHoverMode
                      />
                    )}
                  </Box>
                )}
                <Box
                  sx={{
                    display: 'flex',
                    width: '100%',
                    height: `${ARROWS_SECTION_HEIGHT}px`,
                    justifyContent: 'center',
                    alignItems: 'center',
                    boxSizing: 'border-box'
                  }}
                >
                  <Box
                    sx={{
                      display: 'flex',
                      justifyContent: 'center',
                      alignItems: 'center',
                      gap: '8px'
                    }}
                  >
                    <Button
                      ref={getPreviousItemButtonRef}
                      onClick={() => {
                        itemData.hasPrevious && onGetPreviousItemClickHandler();
                        setTimeout(() => {
                          getPreviousItemButtonRef?.current?.blur();
                        }, 200);
                      }}
                      label={''}
                      iconRight={
                        <Icon
                          icon={'outline-arrow-sm-left'}
                          width={11.67}
                          height={10}
                          fill={'#172D32'}
                        />
                      }
                      variant={ButtonVariant.Secondary}
                      disabled={!itemData.hasPrevious}
                    />
                    <Button
                      ref={getNextItemButtonRef}
                      onClick={() => {
                        itemData.hasNext && onGetNextItemClickHandler();
                        setTimeout(() => {
                          getNextItemButtonRef?.current?.blur();
                        }, 200);
                      }}
                      label={''}
                      iconRight={
                        <Icon
                          icon={'outline-arrow-sm-right'}
                          width={11.67}
                          height={10}
                          fill={'#172D32'}
                        />
                      }
                      variant={ButtonVariant.Secondary}
                      disabled={!itemData.hasNext}
                    />
                  </Box>
                </Box>
              </Box>
              {!breakpoint && (
                <Box
                  sx={{
                    display: 'flex',
                    width: !breakpoint ? `${SIDEBAR_WIDTH}px` : '100%',
                    borderLeft: !breakpoint ? '2px solid #E2E8F0' : undefined,
                    flexDirection: 'column',
                    paddingBottom: '12px'
                  }}
                >
                  <CustomAccordion label={'Metadata'}>
                    <MetadataKeyValueList
                      metadataList={itemData.metadataList}
                      editingEnabled={false}
                      deletionEnabled={false}
                      onChangeHandler={() => {}}
                    />
                  </CustomAccordion>
                </Box>
              )}
            </Box>
          </Box>
        ]}
      />
    </div>
  );
}

export default SingleFileViewModal;
