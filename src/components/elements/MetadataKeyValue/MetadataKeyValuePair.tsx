import React from 'react';
import Box from '@mui/material/Box';
import CustomTextField from './CustomTextField';
import { DropdownV2 } from '../dropdownV2';
import { RadioButtonItemProps } from '../../forms';
import DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';
import IconButton from '@mui/material/IconButton';

export interface MetadataKeyValuePairProps {
  index: number;
  keyName?: string;
  value?: string;
  valueType?: string;
  isEditable: boolean;
  isAutoGenerated?: boolean;
  isNewlyCreated?: boolean;
  deletionEnabled?: boolean;
  saveKeyNameLocally?: (index: number, newVal?: string | undefined) => void;
  saveValueLocally?: (index: number, newVal?: string | undefined) => void;
  saveValueTypeLocally?: (index: number, newVal?: string | number | undefined) => void;
  deleteFieldLocally?: (index: number) => void;
}

export function MetadataKeyValuePair({
  index,
  keyName,
  value,
  valueType,
  isEditable,
  isAutoGenerated,
  isNewlyCreated,
  deletionEnabled,
  saveKeyNameLocally,
  saveValueLocally,
  saveValueTypeLocally,
  deleteFieldLocally
}: MetadataKeyValuePairProps) {
  const valueTypes: RadioButtonItemProps[] = [
    {
      id: 'INTEGER',
      label: 'Int'
    },
    {
      id: 'FLOAT',
      label: 'Float'
    },
    {
      id: 'BOOLEAN',
      label: 'Boolean'
    },
    {
      id: 'STRING',
      label: 'String'
    },
    {
      id: 'BLOB',
      label: 'Blob'
    }
  ];

  return (
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'row',
        width: '100%',
        height: '100%',
        backgroundColor: '#F8FAFC',
        borderBottom: '1px solid #E2E8F0',
        alignItems: 'center',
        gap: '8px'
      }}
    >
      <Box
        sx={{
          display: 'flex',
          width: '35%',
          height: '100%',
          flexShrink: 0
        }}
      >
        {/*key name should not be editable unless its newly created*/}
        <CustomTextField
          readOnly={!isNewlyCreated}
          value={keyName}
          saveLocallyHandler={(newVal) => {
            if (saveKeyNameLocally) {
              saveKeyNameLocally(index, newVal);
            }
          }}
          helperText={isAutoGenerated ? 'Auto-generated' : undefined}
          placeholder={'Enter field name'}
        />
      </Box>
      <Box
        sx={{
          display: 'flex',
          width: '65%',
          height: '100%'
        }}
      >
        {isNewlyCreated && (
          <Box flexShrink={0}>
            <DropdownV2
              onChange={(event, value) => {
                if (saveValueTypeLocally) {
                  saveValueTypeLocally(index, value?.id);
                }
              }}
              options={valueTypes}
              isReadOnly={true}
              label={'Value type'}
              errored={false}
              maxWidth={'130px'}
              height={'36px'}
              isSquareCorners={true}
              withoutBorder={true}
              backgroundColorFocus={'white'}
            />
          </Box>
        )}
        <CustomTextField
          readOnly={!isEditable || !!isAutoGenerated}
          value={value}
          saveLocallyHandler={(newVal) => {
            if (saveValueLocally) {
              saveValueLocally(index, newVal);
            }
          }}
          placeholder={isNewlyCreated ? 'Add value' : 'Typing'}
        />
      </Box>
      {isEditable && deletionEnabled && !isAutoGenerated && (
        <IconButton
          style={{ marginRight: '14px', height: '100%', padding: '6px' }}
          onClick={() => {
            if (deleteFieldLocally) {
              deleteFieldLocally(index);
            }
          }}
        >
          <DeleteOutlinedIcon style={{ color: 'rgba(148, 163, 184, 1)' }} fontSize={'medium'} />
        </IconButton>
      )}
    </Box>
  );
}
