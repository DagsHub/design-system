import React, {useEffect, useRef, useState} from 'react';
import Box from "@mui/material/Box";
import {MetadataKeyValuePair} from "./MetadataKeyValuePair";
import StyledTextField from "./StyledTextField";
import IconButton from "@mui/material/IconButton";
import AddIcon from '@mui/icons-material/Add';

export interface MetadataKeyValueListProps {
    maxKeySectionHeight?: string;
    metadataList: { key: string; value: string; valueType: string; multiple: boolean; isAutoGenerated?: boolean; }[];
    isEditable: boolean;
    onSaveHandler?: () => void;
}

export function MetadataKeyValueList({
                                         maxKeySectionHeight,
                                         metadataList,
                                         isEditable,
                                         onSaveHandler
                                     }: MetadataKeyValueListProps) {

    //Todo:
    // - Not sure what to do with the multiple field. (If I need to use it as part of the validations in the future, and also what value should I set for newly created fields).
    // - Validations that are missing:
    //  * Check whether new field created was left empty
    //  * When edit/ creating new keys, make sure the value match the value type.
    //  * When creating new keys, make sure that the new key name doesn't already exist.

    const [temporaryMetadataList, setTemporaryMetadataList] = useState<{ key?: string; value?: string; valueType?: string; multiple: boolean; isAutoGenerated?: boolean; isNewlyCreated?: boolean; }[]>([...metadataList]);
    const boxRef = useRef(null);

    useEffect(() => {
        if (boxRef.current) {
            (boxRef.current as HTMLDivElement).scrollTop = (boxRef.current as HTMLDivElement).scrollHeight;
        }
    }, [temporaryMetadataList]);

    const handleAddNew = () => {
        const newField = {multiple: false, isNewlyCreated: true};
        setTemporaryMetadataList((prevList) => [...prevList, newField]);
        // Scroll to the bottom of the metadata fields box, whenever "add new" button is clicked
        if (boxRef.current) {
            (boxRef.current as HTMLDivElement).scrollTop = (boxRef.current as HTMLDivElement).scrollHeight;
        }
    };

    return (
        <Box>
            <Box ref={boxRef} sx={{maxHeight: maxKeySectionHeight, overflowY: "auto"}}>
                {temporaryMetadataList.map((field) => (
                    <MetadataKeyValuePair {...field} keyName={field.key} isEditable={isEditable}/>
                ))}
            </Box>
            {isEditable &&
                <StyledTextField
                    style={{borderBottom: "1px solid #E2E8F0"}}
                    changeColorOnHover
                    onMouseDown={e => {
                        e.preventDefault() //make text field not focused on a regular click
                    }}
                    InputProps={{
                        readOnly: true,
                        endAdornment:
                            <IconButton onClick={handleAddNew}>
                                <AddIcon/>
                            </IconButton>
                    }}
                    value={"Add new"}
                />
            }
        </Box>
    );
}
